# Statik kÃ¼tÃ¼phanenin adÄ±
NAME		= libsafemalloc.a

# C derleyicisi
CC			= cc

# Derleyici bayraklarÄ±:
# -Wall -Wextra -Werror: TÃ¼m uyarÄ±larÄ± gÃ¶ster ve bunlarÄ± hata olarak kabul et (temiz kod iÃ§in)
# -I.: Header dosyalarÄ±nÄ± gÃ¼ncel dizinde ara (.h dosyasÄ± iÃ§in)
CFLAGS		= -Wall -Wextra -Werror -I.

# ArÅŸivleyici programÄ± ve bayraklarÄ±
# r: DosyalarÄ± arÅŸive ekler veya deÄŸiÅŸtirir
# c: ArÅŸiv yoksa oluÅŸturur
# s: ArÅŸiv iÃ§in bir indeks oluÅŸturur
AR			= ar rcs

# KÃ¼tÃ¼phaneyi oluÅŸturacak kaynak dosyalar (.c)
# EÄŸer baÅŸka .c dosyalarÄ±nÄ±z varsa buraya ekleyin: s_malloc.c dosya2.c dosya3.c
SRCS		= s_malloc.c

# Kaynak dosyalardan Ã¼retilecek olan nesne dosyalarÄ± (.o)
# .c uzantÄ±sÄ±nÄ± .o ile otomatik olarak deÄŸiÅŸtirir
OBJS		= $(SRCS:.c=.o)

# Header dosyanÄ±z. DeÄŸiÅŸtiÄŸinde yeniden derleme tetiklenir.
HEADER		= s_malloc.h

# Kural: all
# VarsayÄ±lan hedeftir. 'make' komutu Ã§alÄ±ÅŸtÄ±rÄ±ldÄ±ÄŸÄ±nda bu kural Ã§alÄ±ÅŸÄ±r.
# AmacÄ± kÃ¼tÃ¼phane dosyasÄ±nÄ± oluÅŸturmaktÄ±r.
all:		$(NAME)

# Kural: KÃ¼tÃ¼phane dosyasÄ±nÄ± (.a) oluÅŸturma
# Nesne dosyalarÄ±na (.o) baÄŸÄ±mlÄ±dÄ±r.
$(NAME):	$(OBJS)
			@$(AR) $(NAME) $(OBJS)
			@echo "âœ… Statik kÃ¼tÃ¼phane '$(NAME)' baÅŸarÄ±yla oluÅŸturuldu."

# Kural: Nesne dosyalarÄ±nÄ± (.o) oluÅŸturma
# Kaynak dosyalarÄ±na (.c) ve header dosyasÄ±na (.h) baÄŸÄ±mlÄ±dÄ±r.
%.o:		%.c $(HEADER)
			@$(CC) $(CFLAGS) -c $< -o $@
			@echo "  -> $< derlendi."

# Kural: clean
# Sadece derleme sÄ±rasÄ±nda oluÅŸan nesne dosyalarÄ±nÄ± (.o) siler.
clean:
			@rm -f $(OBJS)
			@echo "ğŸ§¹ Nesne dosyalarÄ± temizlendi."

# Kural: fclean
# 'clean' kuralÄ±nÄ± Ã§alÄ±ÅŸtÄ±rÄ±r ve ek olarak oluÅŸturulan son kÃ¼tÃ¼phane dosyasÄ±nÄ± (.a) da siler.
fclean:		clean
			@rm -f $(NAME)
			@echo "ğŸ”¥ TÃ¼m proje dosyalarÄ± temizlendi."

# Kural: re
# Projeyi tamamen temizler ve yeniden derler.
re:			fclean all

# Bu hedeflerin birer dosya adÄ± olmadÄ±ÄŸÄ±nÄ± belirtiriz.
.PHONY:		all clean fclean re